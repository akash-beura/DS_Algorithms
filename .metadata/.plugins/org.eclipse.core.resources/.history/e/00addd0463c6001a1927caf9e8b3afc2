package amazon.matrix;

public class EggDropProblem {

	static int[][] matrix;

	public int solveEggDrop(int n, int e) {
		if (n == 1 || n == 0 || e == 1) {
			return n;
		}

		int min = Integer.MAX_VALUE;

		for (int k = 1; k <= n; k++) {
			int temp = 1 + Math.max(solveEggDrop(n - 1, e - 1), solveEggDrop(n - k, e));
			min = Math.min(temp, min);
		}
		return min;
	}

	public int eggDropDP(int n, int e) {
		int[][] eggFloor = new int[e + 1][n + 1];
		int i, j;
		int res = 0;
		// check for any no. of eggs when whe check for 0 or 1 floor, the result are
		// always going to be the same
		// i.e 9 eggs 0 floor = 0, 9 eggs 1 floor = 1;
		for (i = 1; i <= e; i++) {
			eggFloor[i][0] = 0;
			eggFloor[i][1] = 1;
		}

		// now checking for n. no. of floor with 1 egg, eg. 9 floor 1 egg = 9;
		for (j = 1; j <= n; j++) {
			eggFloor[1][j] = j;
		}

		
		
		for (i = 2; i <= e; i++) {
			for (j = 2; j <= n; j++) {
				eggFloor[i][j] = Integer.MAX_VALUE;
				for (int x = 1; x <= j; x++) {
					res = 1 + Math.max(eggFloor[i - 1][j - 1], eggFloor[i][j - x]);
					eggFloor[i][j] = Math.min(eggFloor[i][j], res);
				}
			}
		}
	
		return eggFloor[e][n];
	}

	public static void main(String[] args) {
		int eggs = 3;
		int floors = 10;
		matrix = new int[eggs + 1][floors + 1];
		EggDropProblem ob = new EggDropProblem();
		System.out.println(ob.eggDropDP(36, 2));
	}

}
