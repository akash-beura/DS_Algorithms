package com.wityo.bst;

class Node {
	Node left;
	Node right;
	int data;
}

class QueueNode {
	Node data;
	QueueNode next;
}

class Queue {
	private QueueNode front;
	private QueueNode rear;

	public boolean isEmpty() {
		if (front == null && rear == null) {
			return true;
		}
		return false;
	}

	public void enqueue(Node data) {
		QueueNode node = new QueueNode();
		node.data = data;
		if (isEmpty()) {
			front = rear = node;
		} else {
			rear.next = node;
			rear = node;
		}
	}

	public Node deQueue() {
		Node temp = front.data;
		if (!isEmpty()) {
			if (front == rear) {
				front = rear = null;
			} else {
				front = front.next;
			}
		}
		return temp;
	}

	public Node front() {
		if (front == null)
			return null;
		return front.data;
	}
}

public class BST {
	Node root;

	public Node createNode(int data) {
		Node node = new Node();
		node.data = data;
		return node;
	}

	public Node insert(Node root, int data) {
		if (root == null) {
			root = createNode(data);
		} else if (data <= root.data) {
			root.left = insert(root.left, data);
		} else if (data > root.data) {
			root.right = insert(root.right, data);
		}
		return root;
	}

	public void searchNode(Node root, int data) {
		if (root == null) {
			System.out.println("No data as such found");
		} else if (root.data == data) {
			System.out.println("Data found");
		} else if (data > root.data) {
			searchNode(root.right, data);
		} else {
			searchNode(root.left, data);
		}
	}

	public void maxElement() {
		Node temp = root;
		while (temp.right != null)
			temp = temp.right;
		System.out.println("Largest data in the tree is:" + temp.data);
	}

	public void minElement() {
		Node temp = root;
		while (temp.left != null)
			temp = temp.left;
		System.out.println("Smallest data in the tree is:" + temp.data);
	}

	public int totalNodes(Node root) {
		if (root == null) {
			return 0;
		}
		return totalNodes(root.left) + 1 + totalNodes(root.right);
	}

	private int max(int a, int b) {
		if (a == b)
			return a;
		else if (a > b)
			return a;
		else
			return b;
	}

	public int findHeight(Node root) {
		if (root == null) {
			return -1;
		}
		return max(findHeight(root.left), findHeight(root.right)) + 1;
	}

	// Depth first search using recursion
	public void preOrder(Node root) {
		if (root == null) {
			return;
		}
		System.out.println(root.data);
		preOrder(root.left);
		preOrder(root.right);
	}

	public void postOrder(Node root) {
		if (root == null) {
			return;
		}
		postOrder(root.left);
		postOrder(root.right);
		System.out.println(root.data);
	}

	public void inOrder(Node root) {
		if (root == null) {
			return;
		}
		inOrder(root.left);
		inOrder(root.right);
		System.out.println(root.data);
	}

	public void bfs(Node root) {
		Queue queue = new Queue();
		queue.enqueue(root);
		while (!queue.isEmpty()) {
			Node temp = queue.deQueue();
			System.out.print(temp.data + " ");
			if (temp.left != null)
				queue.enqueue(temp.left);
			if (temp.right != null)
				queue.enqueue(temp.right);

		}
	}
	
	public boolean validateTree(Node root) {
		if(root == null) {
			return true;
		} 
	}

}
