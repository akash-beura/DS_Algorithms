package dynamicprogramming;

public class ZeroOneKS {

	public static int[][] dp;

	public int solve(int weights[], int[] profits, int n, int w) {
		if (n == 0 || w == 0) {
			return 0;
		}

		if (weights[n - 1] <= w) {
			return Math.max(profits[n - 1] + solve(weights, profits, n - 1, w - weights[n - 1]),
					solve(weights, profits, n - 1, w));
		} else {
			return solve(weights, profits, n - 1, w);
		}
	}

	public int solveUsingMemo(int weights[], int[] profits, int n, int w) {
		if (n == 0 || w == 0) {
			return 0;
		}

		if (dp[n][w] != -1)
			if (weights[n - 1] <= w) {
				return Math.max(profits[n - 1] + solve(weights, profits, n - 1, w - weights[n - 1]),
						solve(weights, profits, n - 1, w));
			} else {
				return solve(weights, profits, n - 1, w);
			}
	}

	public static void main(String[] args) {
		int[] weights = { 10, 20, 30 };
		int[] profits = { 60, 100, 120 };
		int n = weights.length;
		int weight = 50;
		ZeroOneKS ob = new ZeroOneKS();
		System.out.println(ob.solve(weights, profits, n, weight + 1));

		// n reps total items, weight reps all possible weight;
		dp = new int[n + 1][weight];

		for (int i = 0; i < n + 1; i++) {
			for (int j = 0; j < weight + 1; j++) {
				if (i == 0 || j == 0) {
					dp[i][j] = 0;
				} else {
					dp[i][j] = -1;
				}
			}
		}

	}

}
